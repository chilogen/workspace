#I - 老当益壮， 宁移白首之心？
> 因为 该 ‘01’ 串构成一个环，转一圈后又回到原来的数字，与欧拉图很相似。  
所以考虑用欧拉图求解，  

1. 因为绕来绕去的是不同的数字，所以应把每个数字当成节点，而节点之间的  
连接有两种---往末尾加‘1’或加‘0’。
2. 节点的保存用一个32767的int保存，通过二进制运算得到与它关联的下两个  
数字。
3. O(玄)  
从郭大爷处听来这个词，用在我的这题代码上很合适。最初代码是先往末尾加  
‘0’，递归退出后再对加‘1’进行递归。然后我的电脑跑到**‘6’**就不行了，提交  
到OJ上毫无疑问的TLE。在调试的时候发现递归 ‘0’的时候大多会退出，也就是  
加‘0’在大多时候是不合理的，于是把代码改成先递归 ‘1’，再递归‘0’。唰的一下  
答案就出来了。  
两种情况对比（n=6）  
先0后1进入递归次数：384721371  
先1后0进入递归次数：66  
....
代码：
```c
#include <cstdio>
#include <cmath>
#include <cstring>

int n;
unsigned short int a[32768],mark[32767];
int size;
unsigned short int higbit(unsigned short int x)
{
	return x>>n<<n;
}
//long int time=0;
int dfs(unsigned short int x)
{
	//time++;
	if(size==0&&x==1)	return 1;//find
	if(size==0&&x!=1)	return 0;//not find
	unsigned short m0=x<<1,m1=(x<<1)+1;
	m0-=higbit(m0);	m1-=higbit(m1);
	int ans=0;
	if(!mark[m1])
	{
		size--;
		mark[m1]=1;
		ans=dfs(m1);
		if(ans)	{printf("1");	return ans;}
		size++;
		mark[m1]=0;
	}
	if(!mark[m0])
	{
		size--;
		mark[m0]=1;
		ans=dfs(m0);
		if(ans)	{printf("0");	return ans;}
		size++;
		mark[m0]=0;
	}//swap 1 and 0 will occur O(xuan)
	return ans;
}
int main()
{
	scanf("%d",&n);
	size=pow(2,n);
	memset(mark,0,sizeof(mark));
	a[0]=0;
	int i;
	for(i=1;i<32767;i++)
		a[i]=a[i-1]+1;
	dfs(1);
	//printf("\n执行次数：%ld\n",time);
	return 0;
}

```Saturday, 27. May 2017 07:52PM 
