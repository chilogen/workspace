#N - 这是一道比CCCC简单题更有想象力的中档题

* 定义`dp[i][j][k]` 为写 `i` 行代码，产生`k`个bug，且最后一行代码由`j`写，那么  
状态转移方程就是`dp[i][j][k]=sum(dp[i-1][f][k-bug[f]),j<=f<=n`，  
`j<=f<=n`是用来保证这样的情况不会出现：  
> 如样例：
3 3 3 100
1 1 1
当代码行数为3,bug为3时,有这样的重复情况：
”1 写 1行 2写 1行 1 再写1行“和 “1写 1行 1 再写 1行 2写一行”

* 写完后提交，TLE了，发现算了好多根本达不到的状态。以样例为例：  
`dp[2][i][1],dp[3][i][2]等`，写着感觉都像直接搜索了，TLE不冤。  

* 后来发现，这其实就是二维费用的完全背包问题啊，代码行数是一个费用，BUG数也是  
一个费用，那么人当然就看成物品了。所以定义状态dp[i][j][k]为前i个人写m行代码产生k  
个bug的状态数，转移方程就是`dp[i][j][k]=MAX(dp[i-1][j-1][k-bug[j]])`，  
再压缩一下空间复杂度，就行了。
* 但是，一直WA7,百思不得其解。后来发现，原来是看题不仔细，存在有人写一行  
代码产生0个BUG的情况，所以最后统计时要从0开始
代码：
```c
#include <bits/stdc++.h>
int main()
{
  long long int i,j,k,n,m,b,mod,bug[501],dp[501][501];
  scanf("%lld%lld%lld%lld",&n,&m,&b,&mod);
  for(i=1;i<=n;i++) scanf("%lld",&bug[i]);
  memset(dp,0,sizeof(dp));  dp[0][0]=1;
  for(i=1;i<=n;i++){
    for(j=1;j<=m;j++){
      for(k=bug[i];k<=b;k++)
        dp[j][k]=(dp[j][k]+dp[j-1][k-bug[i]])%mod;
    }
  }
  for(i=0,j=0;i<=b;i++)//从0开始
    j=(j+dp[m][i])%mod;
  printf("%lld\n",j);
  return 0;
}
```