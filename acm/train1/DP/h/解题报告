#H - Uestc的命运之旅

* 分别计算四个角为起点，到每一格的最大收获，设为`l1,l2,r1,r2`。  

* 枚举每一个点，设点A(x,y)为重合点，则经过(x,y)的路径能获得的最大收获为：  
`从左上角到达A的收获+从右下角到达A点的收获+从左下角到达A点的收获+从右上`  
`角到达A点的收获-A点的收获`，没枚举一个点记录和的最大值，最终结果为该最大值。

* 开数组问题  
	* 地图的大小为10<sup>3</sup>*10<sup>3</sup>,存储每个点的值需要一个这么大的数组，存储四个顶点的结  
	果需要四个这么大的数组，直接定义会报段错误(开始怀疑这题是这么写吗)。
	
	* 改用动态数组，但我一直习惯用c的语法，所以先用的malloc。但有个问题：  
	malloc申请的内存没有初始化为0，所以用memset初始化，又报段错误（再次  
	怀疑这题是这么写吗）
	
	* 改用new,然后就行了。。。
	
代码：
```c
#include <bits/stdc++.h>
#define MAX(a,b)  a>b?a:b
using namespace std;
int main()
{
  int n,m,i,j,k,l,x1,y1,x2,y2;
  unsigned int max;
  unsigned int **l1,**l2,**r1,**r2,**a;
  a=new unsigned *[1003];
  l1=new unsigned *[1003];
  l2=new unsigned *[1003];
  r1=new unsigned *[1003];
  r2=new unsigned *[1003];
  for(i=0;i<1003;i++)
  {
    a[i]=new unsigned [1003];
    l1[i]=new unsigned [1003];
    l2[i]=new unsigned [1003];
    r1[i]=new unsigned [1003];
    r2[i]=new unsigned [1003];
  }
  scanf("%d%d",&n,&m);
  for(i=1;i<=n;i++) for(j=1;j<=m;j++) scanf("%u",&a[i][j]);
  for(i=1;i<=n;i++) for(j=1;j<=m;j++)
  {
    x1=i-1; y1=j;
    x2=i; y2=j-1;
    if(x1>=0)  l1[i][j]=MAX(l1[i][j],l1[x1][y1]+a[i][j]);
    if(y2>=0)  l1[i][j]=MAX(l1[i][j],l1[x2][y2]+a[i][j]);
  }//算左上角
  for(i=n;i>=1;i--) for(j=1;j<=m;j++)
  {
    x1=i+1; y1=j;
    x2=i; y2=j-1;
    l2[i][j]=0;
    if(x1<=n+1) l2[i][j]=MAX(l2[i][j],l2[x1][y1]+a[i][j]);
    if(y2>=0) l2[i][j]=MAX(l2[i][j],l2[x2][y2]+a[i][j]);
  }//算左下角
  for(i=1;i<=n;i++) for(j=m;j>=1;j--)
  {
    x1=i-1; y1=j;
    x2=i; y2=j+1;
    r1[i][j]=0;
    if(x1>=0) r1[i][j]=MAX(r1[i][j],r1[x1][y1]+a[i][j]);
    if(y2<=m+1) r1[i][j]=MAX(r1[i][j],r1[x2][y2]+a[i][j]);
  }//算右上角
  for(i=n;i>=1;i--) for(j=m;j>=1;j--)
  {
    x1=i+1; y1=j;
    x2=i; y2=j+1;
    r2[i][j]=0;
    if(x1<=n+1) r2[i][j]=MAX(r2[i][j],r2[x1][y1]+a[i][j]);
    if(y2<=m+1) r2[i][j]=MAX(r2[i][j],r2[x2][y2]+a[i][j]);
  }//算右下角
  max=0;
  for(i=2;i<n;i++) for(j=2;j<m;j++)
  {
      max=MAX(max,l1[i-1][j]+r2[i+1][j]+l2[i][j-1]+r1[i][j+1]);
      max=MAX(max,l1[i][j-1]+r2[i][j+1]+l2[i+1][j]+r1[i-1][j]);
  }//枚举相遇点出答案
  printf("%u",max);
  return 0;
}
```