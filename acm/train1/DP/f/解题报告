#F - Search gold

* 机器人在（x,y）时能往四个位置走，因此，（x,y）也能从四个位置到达，也就是  
四个转移状态。

* 设（x,y）能由（x1,y1）（x2,y2）（x3,y3）（x4,y4）四个点到达，那么到达  
（x,y）点所能获得的最大金币值:  
  dp[x,y]=MAX(dp[x1,y1]+a[i][j],dp[x2,y2]+a[i][j],dp[x3,y3]+a[i][j],  
  dp[x4,y4]+a[i][j])。  
  
* 若某一点为负，则说明到达该点机器人会死去，自然也就不会再有从该点出发的  
状态了，所以该点设为-INF,这就要求dp初值应设为-1

* 最后枚举每一格，找到最大金币值，输出即可。

代码：
```c
#include <bits/stdc++.h>
#define reset(a,b) memset(a,b,sizeof(a))
#define MAX(a,b)  a>b?a:b
#define INF 1000
using namespace std;
int n,m,a[1001][1001],dp[1001][1001];
int main()
{
  int i,j,k,l;
  int x1,x2,x3,x4,y1,y2,y3,y4;
  scanf("%d%d",&n,&m);
  for(i=1;i<=n;i++)
    for(j=1;j<=m;j++) scanf("%d",&a[i][j]);
  reset(dp,-1);  dp[1][1]=a[1][1];
  for(i=1;i<=n;i++)
  {
    for(j=1;j<=m;j++)
    {
      x1=i-1; y1=j;
      x2=i;   y2=j-1;
      x3=i-2; y3=j-1;
      x4=i-1; y4=j-2;
      if(x1>0&&y1>0)
        dp[i][j]=MAX(dp[i][j],dp[x1][y1]+a[i][j]);
      if(x2>0&&y2>0)
        dp[i][j]=MAX(dp[i][j],dp[x2][y2]+a[i][j]);
      if(x3>0&&y3>0)
        dp[i][j]=MAX(dp[i][j],dp[x3][y3]+a[i][j]);
      if(x4>0&&y4>0)
        dp[i][j]=MAX(dp[i][j],dp[x4][y4]+a[i][j]);
      if(dp[i][j]<0)  dp[i][j]=-INF;
    }
  }
  k=0;
  for(i=1;i<=n;i++)
    for(j=1;j<=m;j++)
      if(dp[i][j]>k)  k=dp[i][j];
  printf("%d",k);
  return 0;
}
```